// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model CashBook {
  id               String            @id @default(uuid())
  title            String            @unique
  cashBalance      Int
  reportingPeriods ReportingPeriod[]
  expenses         Expense[]

  @@map("cash_books")
}

model Dimension {
  id                         String                       @id @default(uuid())
  alias                      String                       @unique
  title                      String                       @unique
  dimensionItems             DimensionItem[]
  specialists DimensionItemsToSpecialist[]

  @@map("dimensions")
}

model DimensionItem {
  id             String                       @id @default(uuid())
  alias          String                       @unique
  title          String                       @unique
  dimension      Dimension                    @relation(fields: [dimensionAlias], references: [alias])
  dimensionAlias String                       @map("dimension_alias")
  specialists    DimensionItemsToSpecialist[]
  description String

  @@map("dimension_items")
}

model DimensionItemsToSpecialist {
  dimension          Dimension     @relation(fields: [dimensionAlias], references: [alias])
  dimensionAlias     String        @map("dimension_alias")
  dimensionItem      DimensionItem @relation(fields: [dimensionItemAlias], references: [alias])
  dimensionItemAlias String        @map("dimension_item_alias")
  specialist         Specialist    @relation(fields: [specialistAlias], references: [alias])
  specialistAlias    String        @map("specialist_alias")

  @@id([dimensionItemAlias, specialistAlias])
  @@map("dimension_items_to_specialists")
}

model Expense {
  id            String   @id @default(uuid())
  cashBook      CashBook @relation(fields: [cashBookId], references: [id])
  cashBookId    String   @map("cash_book_id")
  amount        Int
  reportingDate DateTime @map("reporting_date") @db.Date
  details       String?
  createdAt     DateTime @default(now()) @map("created_at")

  @@map("expenses")
}

model Member {
  id             String          @id @default(uuid())
  firstName      String          @map("first_name")
  lastName       String          @map("last_name")
  status         MemberStatus
  membershipFees MembershipFee[]
  createdAt      DateTime        @default(now()) @map("created_at")
  updatedAt      DateTime        @updatedAt @map("updated_at")

  @@map("members")
}

model MembershipFee {
  id                String          @id @default(uuid())
  reportingPeriod   ReportingPeriod @relation(fields: [reportingPeriodId], references: [id])
  reportingPeriodId String          @map("reporting_period_id")
  member            Member          @relation(fields: [memberId], references: [id], onDelete: Cascade)
  memberId          String          @map("member_id")
  amount            Int
  createdAt         DateTime        @default(now()) @map("created_at")
  updatedAt         DateTime        @updatedAt @map("updated_at")

  @@map("membership_fees")
}

model ReportingPeriod {
  id             String          @id @default(uuid())
  title          String
  cashBook       CashBook        @relation(fields: [cashBookId], references: [id], onDelete: Cascade)
  cashBookId     String          @map("cash_book_id")
  startDate      DateTime        @map("start_date") @db.Date
  endDate        DateTime        @map("end_date") @db.Date
  membershipFees MembershipFee[]

  @@map("reporting_periods")
}

model PageSection {
  id               String        @id @default(uuid())
  page             String
  section          String
  primaryHeading   String?       @map("primary_heading")
  secondaryHeading String?       @map("secondary_heading")
  href             String?
  parentId         String?       @map("parent_id")
  parent           PageSection?  @relation("ParentChildren", fields: [parentId], references: [id])
  children         PageSection[] @relation("ParentChildren")

  @@unique(name: "alias", [page, section])
  @@map("page-sections")
}

model Specialist {
  id             String                       @id @default(uuid())
  alias          String                       @unique
  firstName      String                       @map("first_name")
  lastName       String                       @map("last_name")
  phones         String[]
  emails         String[]
  websites       String[]
  dimensionItems DimensionItemsToSpecialist[]

  @@map("specialists")
}

// model Specialty {
//   id          String                     @id @default(uuid())
//   alias       String                     @unique
//   title       String                     @unique
//   description String
//   specialists SpecialistsToSpecialties[]

//   @@map("specialties")
// }

// model SpecialistsToSpecialties {
//   specialist   Specialist @relation(fields: [specialistId], references: [id])
//   specialistId String     @map("specialist_id")
//   specialty    Specialty  @relation(fields: [specialtyId], references: [id])
//   specialtyId  String     @map("specialty_id")

//   @@id([specialistId, specialtyId])
//   @@map("specialists_to_specialties")
// }

model Token {
  token     String   @unique
  exp       DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @map("user_id")
  userAgent String   @map("user_agent")

  @@map("tokens")
}

model User {
  id        String    @id @default(uuid())
  userName  String    @unique @map("user_name")
  email     String?   @unique
  phone     String?   @unique
  password  String?
  provider  Provider?
  roles     Role[]
  tokens    Token[]
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")

  @@map("users")
}

enum MemberStatus {
  ACTIVE
  INACTIVE
}

enum Provider {
  GOOGLE
}

enum Role {
  ADMIN
  USER
}
