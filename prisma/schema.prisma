// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model CashBook {
  id              String           @id @default(uuid())
  title           String           @unique
  cashBalance     Int
  reportingMonths ReportingMonth[]
  expenses Expense[]

  @@map("cash_books")
}

model Expense {
  id      String  @id @default(uuid())
  CashBook   CashBook @relation(fields: [cashBookId], references: [id])
  cashBookId String
  amount  Int
  reportingDate DateTime @map("reporting_date") @db.Date
  details String?
  createdAt DateTime @default(now()) @map("created_at")

  @@map("expenses")
}

model Member {
  id             String          @id @default(uuid())
  firstName      String          @map("first_name")
  lastName       String          @map("last_name")
  status         MemberStatus
  membershipFees MembershipFee[]
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("members")
}

model MembershipFee {
  id               String         @id @default(uuid())
  reportingMonth   ReportingMonth @relation(fields: [reportingMonthId], references: [id])
  reportingMonthId String         @map("reporting_month_id")
  member    Member   @relation(fields: [memberId], references: [id], onDelete: Cascade)
  memberId  String   @map("member_id")
  amount           Int
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("membership_fees")
}

model ReportingMonth {
  id             String          @id @default(uuid())
  cashBook       CashBook        @relation(fields: [cashBookId], references: [id], onDelete: Cascade)
  cashBookId     String          @map("cash_book_id")
  month          DateTime        @db.Date
  membershipFees MembershipFee[]

  @@map("reporting_months")
}

model Token {
  token     String   @unique
  exp       DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @map("user_id")
  userAgent String   @map("user_agent")

  @@map("tokens")
}

model User {
  id       String    @id @default(uuid())
  email    String    @unique
  password String?
  provider Provider?
  roles    Role[]
  tokens   Token[]
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("users")
}

enum MemberStatus {
  ACTIVE
  INACTIVE
}

enum Provider {
  GOOGLE
}

enum Role {
  ADMIN
  USER
}
