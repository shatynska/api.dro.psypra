// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator nestjsDto {
  provider                        = "prisma-generator-nestjs-dto"
  output                          = "../src/prisma/entities"
  outputToNestJsResourceStructure = "false"
  flatResourceStructure           = "false"
  exportRelationModifierClasses   = "true"
  reExport                        = "false"
  createDtoPrefix                 = "Create"
  updateDtoPrefix                 = "Update"
  dtoSuffix                       = "Dto"
  entityPrefix                    = ""
  entitySuffix                    = ""
  classValidation                 = "true"
  fileNamingStyle                 = "camel"
  noDependencies                  = "false"
  outputType                      = "class"
  definiteAssignmentAssertion     = "false"
  requiredResponseApiProperty     = "true"
  prettier                        = "true"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model CashBalance {
  /// @example 8420
  value Int @id

  @@map("cash_balance")
}

model CashBook {
  /// @IsUUID(4)
  /// @example c0287617-9f36-489e-ba72-d462777987e9
  id              String @id @default(uuid())
  /// @example 2022
  year            Int    @unique
  /// @example [2, 3, 4, 5, 7, 8, 9, 10, 11]
  reportingMonths Int[]  @map("reporting_months")

  @@map("cash_books")
}

model User {
  /// @IsUUID(4)
  /// @example c0298617-9f36-489e-ba72-d462777987e9
  id        String    @id @default(uuid())
  /// @example test@gmail.com
  /// @IsEmail
  email     String    @unique
  /// @example secret_password
  ///@MinLength(6)
  password  String?
  provider  Provider?
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  /// @example [Role.USER]
  roles     Role[]
  Token     Token[]

  @@map("users")
}

model Token {
  token     String   @unique
  exp       DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @map("user_id")
  userAgent String   @map("user_agent")

  @@map("tokens")
}

enum Role {
  ADMIN
  USER
}

enum Provider {
  GOOGLE
}
